{
  
    
        "post0": {
            "title": "Video Game Recommendation Engine",
            "content": "Overview . Welcome to my project on creating a video game recommendation system. Many streaming services utilize recommendation systems to increase customer engagement with their platform. I wanted to create a similar system for video games to display new games for users to play. In this project, we will be using a content-based recommender system. Therefore, we will base our recommendations on titles, publishers, descriptions, genres, and tags that different items share. During this project, I will be utilizing the packages Pandas, Numpy, and Sklearn. These are all standard packages for data manipulation, mathematics, and machine learning applications. . Link for Dataset: https://www.kaggle.com/trolukovich/steam-games-complete-dataset . import pandas as pd import numpy as np from sklearn.metrics.pairwise import cosine_similarity from sklearn.feature_extraction.text import CountVectorizer . Games = pd.read_csv(&#39;~/Downloads/steam_games 2.csv&#39;) . Background . The dataset features 20 columns, many that will not be of use to this type of recommendation system. As well, there are 40,833 unique video games with unique characteristics. The recommendation system is designed to suit the needs of novice gamers. Therefore, we will be excluding free games and focusing on Triple-A titles. Triple-A games are video games produced or developed by a major publisher, which allocated a large budget for both development and marketing. Many novice gamers will be familiar with Triple-A games rather than small indie games. Most Triple-A titles retail price is $59.99, however, some games release months or years after their console release to the steam platform for a discount. Therefore we will limit our dataset to only titles with a price range of $19.99 to $59.99. . Games.head(3) . url types name desc_snippet recent_reviews all_reviews release_date developer publisher popular_tags game_details languages achievements genre game_description mature_content minimum_requirements recommended_requirements original_price discount_price . 0 https://store.steampowered.com/app/379720/DOOM/ | app | DOOM | Now includes all three premium DLC packs (Unto... | Very Positive,(554),- 89% of the 554 user revi... | Very Positive,(42,550),- 92% of the 42,550 use... | May 12, 2016 | id Software | Bethesda Softworks,Bethesda Softworks | FPS,Gore,Action,Demons,Shooter,First-Person,Gr... | Single-player,Multi-player,Co-op,Steam Achieve... | English,French,Italian,German,Spanish - Spain,... | 54.0 | Action | About This Game Developed by id software, the... | NaN | Minimum:,OS:,Windows 7/8.1/10 (64-bit versions... | Recommended:,OS:,Windows 7/8.1/10 (64-bit vers... | $19.99 | $14.99 | . 1 https://store.steampowered.com/app/578080/PLAY... | app | PLAYERUNKNOWN&#39;S BATTLEGROUNDS | PLAYERUNKNOWN&#39;S BATTLEGROUNDS is a battle roya... | Mixed,(6,214),- 49% of the 6,214 user reviews ... | Mixed,(836,608),- 49% of the 836,608 user revi... | Dec 21, 2017 | PUBG Corporation | PUBG Corporation,PUBG Corporation | Survival,Shooter,Multiplayer,Battle Royale,PvP... | Multi-player,Online Multi-Player,Stats | English,Korean,Simplified Chinese,French,Germa... | 37.0 | Action,Adventure,Massively Multiplayer | About This Game PLAYERUNKNOWN&#39;S BATTLEGROUND... | Mature Content Description The developers de... | Minimum:,Requires a 64-bit processor and opera... | Recommended:,Requires a 64-bit processor and o... | $29.99 | NaN | . 2 https://store.steampowered.com/app/637090/BATT... | app | BATTLETECH | Take command of your own mercenary outfit of &#39;... | Mixed,(166),- 54% of the 166 user reviews in t... | Mostly Positive,(7,030),- 71% of the 7,030 use... | Apr 24, 2018 | Harebrained Schemes | Paradox Interactive,Paradox Interactive | Mechs,Strategy,Turn-Based,Turn-Based Tactics,S... | Single-player,Multi-player,Online Multi-Player... | English,French,German,Russian | 128.0 | Action,Adventure,Strategy | About This Game From original BATTLETECH/Mec... | NaN | Minimum:,Requires a 64-bit processor and opera... | Recommended:,Requires a 64-bit processor and o... | $39.99 | NaN | . Step One: Filtering the price . The original price column will be the column we intend to filter. We have a problem to sort out before we proceed with our filtering. We cannot sort the original price column because it is not considered a numerical type. We can fix this by first converting the column to a character type, then remove the dollar sign through character string slicing. After we remove the dollar sign, we can convert the column to a numerical type. Now we can proceed with applying the filter. The total number of unique games in the dataset is now 4,338. . Games.original_price . 0 $19.99 1 $29.99 2 $39.99 3 $44.99 4 Free ... 40828 $2.99 40829 $2.99 40830 $7.99 40831 $9.99 40832 $4.99 Name: original_price, Length: 40833, dtype: object . Games[&#39;original_price&#39;] = Games[&#39;original_price&#39;].str[1:] . Games[&#39;original_price&#39;] = pd.to_numeric(Games[&#39;original_price&#39;],errors=&#39;coerce&#39;) . Games = Games[(Games[&#39;original_price&#39;] &gt;= 19.99) &amp; (Games[&#39;original_price&#39;] &lt;= 59.99)] . Games.shape . (4338, 20) . Step Two: Choosing columns to use in the recommendation system . When choosing which columns to put in the recommendation system, we should be mindful of the characteristics gamer&#39;s value. The developer variable is important to include since developers often have the same team working on different games. Therefore each game produced by the same developer will have a similar style of gameplay. Genre variable provides a broad grouping of games with similarities in form, style, or subject matter. Popular Tags variable is an in-depth description of different gaming characteristics. The Game Details variable lists a game&#39;s online offering such as whether a game is single-player or multiplayer. The last variable would be the name of the game, which is valuable because sequels and prequels will be included in the recommendation. . Games.head(3) . url types name desc_snippet recent_reviews all_reviews release_date developer publisher popular_tags game_details languages achievements genre game_description mature_content minimum_requirements recommended_requirements original_price discount_price . 0 https://store.steampowered.com/app/379720/DOOM/ | app | DOOM | Now includes all three premium DLC packs (Unto... | Very Positive,(554),- 89% of the 554 user revi... | Very Positive,(42,550),- 92% of the 42,550 use... | May 12, 2016 | id Software | Bethesda Softworks,Bethesda Softworks | FPS,Gore,Action,Demons,Shooter,First-Person,Gr... | Single-player,Multi-player,Co-op,Steam Achieve... | English,French,Italian,German,Spanish - Spain,... | 54.0 | Action | About This Game Developed by id software, the... | NaN | Minimum:,OS:,Windows 7/8.1/10 (64-bit versions... | Recommended:,OS:,Windows 7/8.1/10 (64-bit vers... | 19.99 | $14.99 | . 1 https://store.steampowered.com/app/578080/PLAY... | app | PLAYERUNKNOWN&#39;S BATTLEGROUNDS | PLAYERUNKNOWN&#39;S BATTLEGROUNDS is a battle roya... | Mixed,(6,214),- 49% of the 6,214 user reviews ... | Mixed,(836,608),- 49% of the 836,608 user revi... | Dec 21, 2017 | PUBG Corporation | PUBG Corporation,PUBG Corporation | Survival,Shooter,Multiplayer,Battle Royale,PvP... | Multi-player,Online Multi-Player,Stats | English,Korean,Simplified Chinese,French,Germa... | 37.0 | Action,Adventure,Massively Multiplayer | About This Game PLAYERUNKNOWN&#39;S BATTLEGROUND... | Mature Content Description The developers de... | Minimum:,Requires a 64-bit processor and opera... | Recommended:,Requires a 64-bit processor and o... | 29.99 | NaN | . 2 https://store.steampowered.com/app/637090/BATT... | app | BATTLETECH | Take command of your own mercenary outfit of &#39;... | Mixed,(166),- 54% of the 166 user reviews in t... | Mostly Positive,(7,030),- 71% of the 7,030 use... | Apr 24, 2018 | Harebrained Schemes | Paradox Interactive,Paradox Interactive | Mechs,Strategy,Turn-Based,Turn-Based Tactics,S... | Single-player,Multi-player,Online Multi-Player... | English,French,German,Russian | 128.0 | Action,Adventure,Strategy | About This Game From original BATTLETECH/Mec... | NaN | Minimum:,Requires a 64-bit processor and opera... | Recommended:,Requires a 64-bit processor and o... | 39.99 | NaN | . Games = Games[[&#39;genre&#39;,&#39;game_details&#39;,&#39;popular_tags&#39;,&#39;developer&#39;,&#39;name&#39;]] . Step Three: Drop all rows with null values . Usually, the first step in any project would be to eliminate null values. However, it is important to wait to perform this step. We have previously consolidated columns to only useful columns for the recommendation system. Now that the dataset only has useful columns, we can eliminate only rows where null values are present in the columns we have chosen. After eliminating null values the total unique games in the dataset are 3,999. We will also be adding a new column labeled Game_ID, which provides a numerical unique value to each game. . Games.head(3) . genre game_details popular_tags developer name . 0 Action | Single-player,Multi-player,Co-op,Steam Achieve... | FPS,Gore,Action,Demons,Shooter,First-Person,Gr... | id Software | DOOM | . 1 Action,Adventure,Massively Multiplayer | Multi-player,Online Multi-Player,Stats | Survival,Shooter,Multiplayer,Battle Royale,PvP... | PUBG Corporation | PLAYERUNKNOWN&#39;S BATTLEGROUNDS | . 2 Action,Adventure,Strategy | Single-player,Multi-player,Online Multi-Player... | Mechs,Strategy,Turn-Based,Turn-Based Tactics,S... | Harebrained Schemes | BATTLETECH | . Games.dropna(inplace = True) . Games.shape . (3999, 5) . Games[&#39;Game_ID&#39;] = range(0,3999) . Games.isnull().values.any() . False . Games = Games.reset_index() . Step Four: Combine selected column&#39;s values into string . Our next step is going to be creating a function that compiles all data in each column selected into one giant string. In order to do so, we are going to make an empty list called important features and then append the values of the desired columns. Then we create a column called important features, where we call the function on the dataset. . def get_important_features(data): important_features = [] for i in range(0, data.shape[0]): important_features.append(data[&#39;name&#39;][i]+&#39; &#39;+data[&#39;developer&#39;][i]+&#39; &#39;+data[&#39;popular_tags&#39;][i]+&#39; &#39;+data[&#39;genre&#39;][i]+data[&#39;game_details&#39;][i]) return important_features . Games[&#39;important_features&#39;] = get_important_features(Games) Games.important_features.head(3) . 0 DOOM id Software FPS,Gore,Action,Demons,Shoote... 1 PLAYERUNKNOWN&#39;S BATTLEGROUNDS PUBG Corporation... 2 BATTLETECH Harebrained Schemes Mechs,Strategy,... Name: important_features, dtype: object . Step Five: Assemble similarity matrix . First, we will be using the count vectorizer function to transform a given text into a vector. The matrix consists of a frequency of words in a string. For example the string &#39;Action, Action, Adventure&#39;, the matrix will display a table with the word, Action, and a frequency of two. Then we can use the cosine similarity function to measure the correlation among the different games. This function produces a matrix with the correlations between each game. The matrix contains a numerical value from zero to one, where a variable closer to one is considered a good recommendation, and a variable closer to zero is considered a poor recommendation. The diagonal line of the value one showcases a perfect correlation because it is the same game on each axis. . cm = CountVectorizer().fit_transform(Games[&#39;important_features&#39;]) . cs = cosine_similarity(cm) . print(cs) . [[1. 0.40406102 0.44932255 ... 0.4276686 0.18002057 0.19738551] [0.40406102 1. 0.34163336 ... 0.41871789 0.31520362 0.26363719] [0.44932255 0.34163336 1. ... 0.26702293 0.27136386 0.33377867] ... [0.4276686 0.41871789 0.26702293 ... 1. 0.35533453 0.27272727] [0.18002057 0.31520362 0.27136386 ... 0.35533453 1. 0.07106691] [0.19738551 0.26363719 0.33377867 ... 0.27272727 0.07106691 1. ]] . Step Six: Use the Recommendation System . Our last step would be to enter the name of the game we wish to get recommendations from. In this case, I have chosen the game Doom Eternal. We then create a new object called title_id, where we obtain the Game_ID value for Doom Eternal, which we assigned to each title in the third step. After this step, we are going to create a list of enumerations that contain the similarity score between each game and Doom Eternal. Then we sort the similarity score in descending order to receive the games with the highest similarities to Doom Eternal. I have chosen to display the top seven games that are recommended to us based on the characteristics of Doom Eternal. . title = &#39;DOOM Eternal&#39; title_id = Games[Games.name == title][&#39;Game_ID&#39;].values[0] . scores = list(enumerate(cs[title_id])) . sorted_scores = sorted(scores, key = lambda x:x[1], reverse = True) sorted_scores = sorted_scores[1:] . j = 0 print(&#39;The 7 most recommended games to&#39;, title, &#39;are: n&#39;) for item in sorted_scores: game_title = Games[Games.Game_ID == item[0]][&#39;name&#39;].values[0] print(j+1, game_title) j = j+1 if j &gt; 6: break . The 7 most recommended games to DOOM Eternal are: 1 Doom 3: BFG Edition 2 DOOM 3 Dead Space™ 2 4 DUSK 5 Max Payne 3 6 Unreal Tournament 3 Black 7 Crysis 2 - Maximum Edition . Conclusion . When observing the top seven results we can see the similarities between the games. The more similarities in each column the higher the ranking will be. For instance, Doom 3: BFG Edition and DOOM have similarities in every column. While the bottom four recommendations have values in common in the genre, game details, and popular tags columns. From my personal experience playing five out of the seven recommended games, I would like to have these games recommended to me based on my interest of DOOM Eternal. . Games = Games.set_index(&#39;name&#39;) . Games.loc[[&#39;DOOM Eternal&#39;,&#39;Doom 3: BFG Edition&#39;,&#39;DOOM&#39;,&#39;Dead Space™ 2&#39;,&#39;DUSK&#39;,&#39;Max Payne 3&#39;,&#39;Unreal Tournament 3 Black&#39;,&#39;Crysis 2 - Maximum Edition&#39;], [&#39;genre&#39;,&#39;game_details&#39;,&#39;popular_tags&#39;,&#39;developer&#39;]] . genre game_details popular_tags developer . name . DOOM Eternal Action | Single-player,Multi-player,Online Multi-Player... | Gore,Violent,Action,FPS,Great Soundtrack,Demon... | id Software | . Doom 3: BFG Edition Action | Single-player,Multi-player,Steam Achievements,... | FPS,Horror,Action,Shooter,Classic,Sci-fi,Singl... | id Software | . DOOM Action | Single-player,Multi-player,Co-op,Steam Achieve... | FPS,Gore,Action,Demons,Shooter,First-Person,Gr... | id Software | . Dead Space™ 2 Action | Single-player,Multi-player,Partial Controller ... | Horror,Action,Sci-fi,Space,Third Person,Surviv... | Visceral Games | . DUSK Action,Indie | Single-player,Online Multi-Player,Steam Achiev... | FPS,Retro,Action,Fast-Paced,Great Soundtrack,H... | David Szymanski | . Max Payne 3 Action | Single-player,Multi-player,Steam Achievements,... | Action,Third-Person Shooter,Bullet Time,Story ... | Rockstar Studios | . Unreal Tournament 3 Black Action | Single-player,Multi-player,Co-op,Steam Achieve... | FPS,Action,Multiplayer,Arena Shooter,Shooter,S... | Epic Games, Inc. | . Crysis 2 - Maximum Edition Action | Single-player,Partial Controller Support | Action,FPS,Sci-fi,Shooter,Singleplayer,Multipl... | Crytek Studios | .",
            "url": "https://dbaldessari66.github.io/resume-website/sklearn/nlp/recommendation%20engine/data%20cleaning/python/2021/09/21/Video-Game-Recommendation.html",
            "relUrl": "/sklearn/nlp/recommendation%20engine/data%20cleaning/python/2021/09/21/Video-Game-Recommendation.html",
            "date": " • Sep 21, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Resume",
            "content": ".",
            "url": "https://dbaldessari66.github.io/resume-website/2021/09/21/Resume.html",
            "relUrl": "/2021/09/21/Resume.html",
            "date": " • Sep 21, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://dbaldessari66.github.io/resume-website/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://dbaldessari66.github.io/resume-website/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Data Science Professional with 2 years of experience learning and implementing machine learning techniques, visualizations, data cleaning and manipulation in several projects. My greatest strength is lifelong learning, which provides the ability to adapt to different situations. .",
          "url": "https://dbaldessari66.github.io/resume-website/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dbaldessari66.github.io/resume-website/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}